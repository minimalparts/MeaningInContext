// Katrin Erk, April 2020
// experiments for the marrying-the-star paper
//
// simplest case:
// generating concepts
// from a mixture of scenario frames
//
// scenarios here: gothic, and sports
// 

// maximum number of discourse referents
var max_referents = 4

var conceptnames = ["Bat-animal", "Vampire", "Bat-stick", "Player"]

var scenarionames = ["gothic", "baseball"]
// scenarios
var scenarios = [
    [0, 1],
    [2, 3]
]

var featurenames = [ "bat", "vampire", "player", 
		     "have_wings", "fly", "humanlike", "athletic", "wooden"]

//-------------Dirichlet
// concentration parameter for the Dirichlet:
// how much should we prefer to stay with few scenarios
var concentration_parameter = 0.5
// parameter for the Dirichlet: a vector of length scenarios.length, consisting
// entirely of the value concentration_parameter
var dirichlet_alpha = ones([ scenarios.length, 1]).mul(concentration_parameter)


//-------- probability of truth
// features "bat", "vampire", "player", "have_wings", "fly", "humanlike", "athletic", "wooden"]
var concept_p_truth = [
    // Bat/animal
    [
	1.0, 0.01, 0.01, 1.0, 1.0, 0.0, 0.01, 0.001
    ],
    // Vampire
    [
	0.01, 1.0, 0.01, 0.2, 0.2, 0.99, 0.1, 0.001
    ],
    // Bat/stick
    [
	1.0, 0.0, 0.0, 0.01, 0.01, 0.0, 0.0, 0.75
    ],
    // Player
    [
	0.0, 0.001, 1.0, 0.01, 0.01, 0.99, 0.8, 0.001
    ]
]
    

//-------- probability of salience (generation of a condition)
// features "bat", "vampire", "player", "have_wings", "fly", "humanlike", "athletic", "wooden"]
var concept_p_salience = [
    // Bat/animal
    [
	1.0, 0.01, 0.0, 0.867, 0.633, 0.0, 0.0, 0.0
    ],
    // Vampire
    [
	0.0, 1.0, 0.0, 0.1, 0.1, 0.1, 0.0, 0.0
    ],
    // Bat/stick
    [
	1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.733
    ],
    // Player
    [
	0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.6, 0.0
    ]
]


//================================
// generating the canonical output: same as in the versions with groups and roles
//================================


var make_group = function(groupindex, scenarioindices, conceptindices, featurevector, conditions) {
    return( [ groupindex, scenarioindices, conceptindices, featurevector, conditions] )
}


var get_groupindex = function(group) {
    return( group[0] )
}

var get_group_scenarioindices = function(group) {
    return( group[1] )
}

var get_group_conceptindices = function(group) {
    return( group[2] )
}

var get_group_featurevector = function(group) {
    return( group[3] )
}

var get_group_conditions = function(group) {
    return( group[4] )
}


var group_string = function(group) {
    return( [
	["x", get_groupindex(group)].join(""),
	map(function(ix) { return(scenarionames[ix]) }, get_group_scenarioindices(group)).join(","),
	map(function(ix) { return(conceptnames[ix]) }, get_group_conceptindices(group)).join(","),
	get_group_featurevector(group).join(","),
	get_group_conditions(group).join(",")
    ].join("|"))
}

var canonical_output = function(groups, roles) {
    return( [
	map(function(group) { return( group_string(group)) }, groups).join(" "),
	map(function(role) { return( role_string(role)) }, roles).join(" ")
    ].join(" ; "))
}



//====================================
// feature vector sampling
//====================================


// sample truth for each feature, return as string
var sample_featurevector = function(conceptindex) {
    return(mapN(function(featureindex) {
	return( flip(concept_p_truth[conceptindex][featureindex] ) ?
		featurenames[featureindex] :
		["-", featurenames[featureindex]].join("") )
    }, featurenames.length))
}



// for each feature, sample whether it is salient,
// keep only the salient ones.
var sample_salient_conditions = function(conceptindex, featurevector) {
    
    return( reduce( function(salience_and_feature, acc) {
	var prob = salience_and_feature[0]
	var feature = salience_and_feature[1]
	
	return( flip(prob) ? [feature].concat(acc) : acc)
	
    }, [ ], zip(concept_p_salience[conceptindex], featurevector)))
}
	   



//================================
// model
//================================
var model = function() {
    // draw a distribution over scenarios
    var theta = dirichlet(dirichlet_alpha)

    // draw the number of discourse referents in the situation description
    // between 1 and max_referents
    var m1 = randomInteger(max_referents) + 1

    // m1 times: draw a scenario,
    // draw a concept from the scenario,
    // draw a feature vector from the concept,
    // sample conditions from the feature vector according to the concept
    var groups = mapN( function(groupindex) {
	// draw a scenario index from a categorical distribution with parameter theta
	var scindex = categorical({ps: theta, vs: [ 0,1]})
	// draw a concept from the scenario number scindex,
	// giving equal probability to all concepts in the scenario
	var conceptindex = categorical({vs: scenarios[ scindex ]})

	// sample feature vector 
	var featurevector = sample_featurevector(conceptindex)

	// for each feature: select whether it is salient,
	// keep only salient ones
	var conditions = sample_salient_conditions(conceptindex, featurevector)

	return( make_group(groupindex, [ scindex ], [ conceptindex ], featurevector, conditions)) 
    }, m1)

    // see output in terms of scenarios and concepts
    return canonical_output(groups, [ ])
}


var dist = Infer({method: 'rejection', samples: 2000, model:model});


dist
