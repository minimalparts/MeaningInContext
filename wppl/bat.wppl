// Katrin Erk, May 2020
// experiments for the marrying-the-star paper
//
// We have a single concept, "Bat-animal", from which we sample. 
// we use all McRae features with their relative naming frequencies
// as salience probabilities, and truth probabilities from quantified
// McRae (averaged over participants)

var scenarionames = ["gothic"]

var featurenames = [ "bat", "has_wings", "nocturnal",
		     "furry", "animal", "screeches", "has_fangs",
		     "associated_with_vampires"
	       ]

var conceptnames = ["Bat-animal"]


//-------- probability of truth
var concept_p_truth = [
    // Bat-animal
    [
	1.0, //bat
	1.0, //has wings
	0.983, // nocturnal
	0.983, //furry
	1.0, // animal
	0.667, //screeches
	0.783, // has fangs
	0.35 // associated with vampires
    ]
]
    

//-------- probability of salience
var concept_p_salience = [
    // Bat-animal
    [
	1.0, // bat
	0.867, // has wings
	0.633, // nocturnal
	0.367, // furry
	0.333, // animal
	0.267, // screeches
	0.233, // has fangs
	0.167 // associated with vampires
    ]
]

//-------- probability of importance/voting:
// 1 for features with probability almost 0 or almost 1,
// otherwise same as salience


var voting_importance_threshold = 0.001

var concept_p_voting = mapN(function(conceptindex) {
    return( mapN(function(featureindex) {
	return ((concept_p_truth[conceptindex][featureindex] <= voting_importance_threshold) ? 1.0 :
		((concept_p_truth[conceptindex][featureindex] >= 1.0- voting_importance_threshold) ? 1.0 :
		 concept_p_salience[conceptindex][featureindex]))
    }, featurenames.length))
}, conceptnames.length)



//================================
// generating the canonical output: same as in the versions with groups and roles
//================================


var make_group = function(groupindex, scenarioindices, conceptindices, featurevector, conditions) {
    return( [ groupindex, scenarioindices, conceptindices, featurevector, conditions] )
}


var get_groupindex = function(group) {
    return( group[0] )
}

var get_group_scenarioindices = function(group) {
    return( group[1] )
}

var get_group_conceptindices = function(group) {
    return( group[2] )
}

var get_group_featurevector = function(group) {
    return( group[3] )
}

var get_group_conditions = function(group) {
    return( group[4] )
}


var group_string = function(group) {
    return( [
	["x", get_groupindex(group)].join(""),
	map(function(ix) { return(scenarionames[ix]) }, get_group_scenarioindices(group)).join(","),
	map(function(ix) { return(conceptnames[ix]) }, get_group_conceptindices(group)).join(","),
	get_group_featurevector(group).join(","),
	get_group_conditions(group).join(",")
    ].join("|"))
}

var canonical_output = function(groups, roles) {
    return( [
	map(function(group) { return( group_string(group)) }, groups).join(" "),
	map(function(role) { return( role_string(role)) }, roles).join(" ")
    ].join(" ; "))
}



//====================================
// feature vector sampling
//====================================




// sample truth for each feature, return as string
var sample_featurevector = function(conceptindex) {
    return(mapN(function(featureindex) {
	return( flip(concept_p_truth[conceptindex][featureindex] ) ?
		featurenames[featureindex] :
		["-", featurenames[featureindex]].join("") )
    }, featurenames.length))
}



// for each feature, sample whether it is salient,
// keep only the salient ones.
var sample_salient_conditions = function(conceptindex, featurevector) {
    
    return( reduce( function(salience_and_feature, acc) {
	var prob = salience_and_feature[0]
	var feature = salience_and_feature[1]
	
	return( flip(prob) ? [feature].concat(acc) : acc)
	
    }, [ ], zip(concept_p_salience[conceptindex], featurevector)))
}
	   


//====================================
// model
//====================================


var model = function() {
    var groupindex = 0
    var scindex = 0
    var conceptindex = 0

    // sample feature vector 
    var featurevector = sample_featurevector(conceptindex)

    // for each feature: select whether it is salient,
    // keep only salient ones
    var conditions = sample_salient_conditions(conceptindex, featurevector)

    var groups = [ make_group(groupindex, [ scindex ], [ conceptindex ], featurevector, conditions) ]

    return canonical_output(groups, [ ])
}


var dist = Infer({method: 'rejection', samples: 2000, model:model});

dist

